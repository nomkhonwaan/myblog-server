// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/nicksrandall/dataloader/dataloader.go

// Package dataloader_mock is a generated GoMock package.
package dataloader_mock

import (
	context "context"
        "github.com/nicksrandall/dataloader"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockInterface) Load(arg0 context.Context, arg1 dataloader.Key) dataloader.Thunk {
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(dataloader.Thunk)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockInterfaceMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockInterface)(nil).Load), arg0, arg1)
}

// LoadMany mocks base method
func (m *MockInterface) LoadMany(arg0 context.Context, arg1 dataloader.Keys) dataloader.ThunkMany {
	ret := m.ctrl.Call(m, "LoadMany", arg0, arg1)
	ret0, _ := ret[0].(dataloader.ThunkMany)
	return ret0
}

// LoadMany indicates an expected call of LoadMany
func (mr *MockInterfaceMockRecorder) LoadMany(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMany", reflect.TypeOf((*MockInterface)(nil).LoadMany), arg0, arg1)
}

// Clear mocks base method
func (m *MockInterface) Clear(arg0 context.Context, arg1 dataloader.Key) dataloader.Interface {
	ret := m.ctrl.Call(m, "Clear", arg0, arg1)
	ret0, _ := ret[0].(dataloader.Interface)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockInterfaceMockRecorder) Clear(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockInterface)(nil).Clear), arg0, arg1)
}

// ClearAll mocks base method
func (m *MockInterface) ClearAll() dataloader.Interface {
	ret := m.ctrl.Call(m, "ClearAll")
	ret0, _ := ret[0].(dataloader.Interface)
	return ret0
}

// ClearAll indicates an expected call of ClearAll
func (mr *MockInterfaceMockRecorder) ClearAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAll", reflect.TypeOf((*MockInterface)(nil).ClearAll))
}

// Prime mocks base method
func (m *MockInterface) Prime(ctx context.Context, key dataloader.Key, value interface{}) dataloader.Interface {
	ret := m.ctrl.Call(m, "Prime", ctx, key, value)
	ret0, _ := ret[0].(dataloader.Interface)
	return ret0
}

// Prime indicates an expected call of Prime
func (mr *MockInterfaceMockRecorder) Prime(ctx, key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prime", reflect.TypeOf((*MockInterface)(nil).Prime), ctx, key, value)
}
