// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/mongodb/query.go

// Package mongodb_mock is a generated GoMock package.
package mongodb_mock

import (
	gomock "github.com/golang/mock/gomock"
        mongodb "github.com/nomkhonwaan/myblog-server/pkg/mongodb"
	reflect "reflect"
)

// MockQuery is a mock of mongodb.Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockQuery) All(result interface{}) error {
	ret := m.ctrl.Call(m, "All", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockQueryMockRecorder) All(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockQuery)(nil).All), result)
}

// mongodb.Iter mocks base method
func (m *MockQuery) Iter() mongodb.Iter {
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(mongodb.Iter)
	return ret0
}

// mongodb.Iter indicates an expected call of Iter
func (mr *MockQueryMockRecorder) Iter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQuery)(nil).Iter))
}

// Limit mocks base method
func (m *MockQuery) Limit(n int) mongodb.Query {
	ret := m.ctrl.Call(m, "Limit", n)
	ret0, _ := ret[0].(mongodb.Query)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockQueryMockRecorder) Limit(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), n)
}

// Select mocks base method
func (m *MockQuery) Select(selector interface{}) mongodb.Query {
	ret := m.ctrl.Call(m, "Select", selector)
	ret0, _ := ret[0].(mongodb.Query)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockQueryMockRecorder) Select(selector interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQuery)(nil).Select), selector)
}

// Skip mocks base method
func (m *MockQuery) Skip(n int) mongodb.Query {
	ret := m.ctrl.Call(m, "Skip", n)
	ret0, _ := ret[0].(mongodb.Query)
	return ret0
}

// Skip indicates an expected call of Skip
func (mr *MockQueryMockRecorder) Skip(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockQuery)(nil).Skip), n)
}
