// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/mongodb/session.go

// Package mongodb_mock is a generated GoMock package.
package mongodb_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// DB mocks base method
func (m *MockSession) DB(name string) Database {
	ret := m.ctrl.Call(m, "DB", name)
	ret0, _ := ret[0].(Database)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockSessionMockRecorder) DB(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockSession)(nil).DB), name)
}

// Clone mocks base method
func (m *MockSession) Clone() Session {
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(Session)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockSessionMockRecorder) Clone() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSession)(nil).Clone))
}

// Close mocks base method
func (m *MockSession) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}
